----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: %date%
-- Design Name: Wishbone intercon
-- Module Name: %iname%
-- Project Name: 
-- Target Devices:
-- Tool Versions:
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 1.00 - File Generated by wishbone intercon generator
-- https://github.com/sea212/vhdl_wishbone_intercon_generator
--
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity intercon is
    Port (  -- General intercon signals
            clk_i : in std_logic;
            rst_i : in std_logic;

            -- Wishbone Master
            %mname%_dat_i : out std_logic_vector(%mdbwidth% downto 0) := (others => '0');
            %mname%_dat_o : in  std_logic_vector(%mdbwidth% downto 0);
            %mname%_adr_o : in  std_logic_vector(%madwidth% downto 0);
            %mname%_ack_i : out std_logic := '0';
            %mname%_cyc_o : in  std_logic;
            %mname%_sel_o : in  std_logic_vector(%mselwidth% downto 0);
            %mname%_stb_o : in  std_logic;
            %mname%_we_o  : in  std_logic;%madditional%

            -- Wishbone Slaves
%slaves%
        );
end intercon;

architecture Behavioral of intercon is

-- define required signals
signal adr : std_logic_vector(%intabwidth% downto 0) := (others => '0');
signal datm2s, dats2m : std_logic_vector(%intdbwidth% downto 0) := (others => '0');
signal sel : std_logic_vector(%selwidth% downto 0) := (others => '0');

-- define required 1-bit signals
signal we, stb, ack, cyc : std_logic := '0';

-- define additional signals (err,rty,tga,tgc,tgd)%additonalsignals%

begin
    datm2s <= %mname%_dat_o;
    adr <= %mname%_adr_o;
    sel <= %mname%_sel_o;
    we <= %mname%_we_o;
    %mname%_dat_i <= dats2m;
    %mname%_ack_i <= ack;%additional_assignments%

    -- interconnect
    interconnect : process (rst_i, adr, %mname%_cyc_o)
    begin
        --if (rising_edge(clk_i)) then
            if (rst_i = '1') then
                --synchronous reset
                stb <= '0';
                cyc <= '0';
            else
                stb <= %mname%_stb_o;
                cyc <= %mname%_cyc_o;

                if (%mname%_cyc_o = '1') then
                    -- address decoder (slave select) = ifs
                    -- interconnection = inside ifs
                    %interconnection%
                else%antilatch2%
                end if;
            end if;
        --else
            --null;
        --end if;
    end process interconnect;
end Behavioral;
