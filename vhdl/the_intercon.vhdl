----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 2016-03-25 13:21:34.929354
-- Design Name: Wishbone intercon
-- Module Name: the_intercon
-- Project Name: 
-- Target Devices:
-- Tool Versions:
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 1.00 - File Generated by wishbone intercon generator
-- https://github.com/sea212/vhdl_wishbone_intercon_generator
--
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity intercon is
    Port (  -- General intercon signals
            clk_i : in std_logic;
            rst_i : in std_logic;

            -- Wishbone Master
            btn_ctrl_dat_i : out std_logic_vector(7 downto 0) := (others => '0');
            btn_ctrl_dat_o : in  std_logic_vector(7 downto 0);
            btn_ctrl_adr_o : in  std_logic_vector(7 downto 0);
            btn_ctrl_ack_i : out std_logic := '0';
            btn_ctrl_cyc_o : in  std_logic;
            btn_ctrl_sel_o : in  std_logic_vector(0 downto 0);
            btn_ctrl_stb_o : in  std_logic;
            btn_ctrl_we_o  : in  std_logic;

            -- Wishbone Slaves
            led_ctrl_dat_i : out std_logic_vector(7 downto 0) := (others => '0');
            led_ctrl_dat_o : in  std_logic_vector(7 downto 0);
            led_ctrl_adr_i : out std_logic_vector(7 downto 0) := (others => '0');
            led_ctrl_ack_o : in  std_logic;
            led_ctrl_cyc_i : out std_logic := '0';
            led_ctrl_sel_i : out std_logic_vector(0 downto 0) := (others => '0');
            led_ctrl_stb_i : out std_logic := '0';
            led_ctrl_we_i  : out std_logic := '0'


        );
end intercon;

architecture Behavioral of intercon is

-- define required signals
signal adr : std_logic_vector(7 downto 0) := (others => '0');
signal datm2s, dats2m : std_logic_vector(7 downto 0) := (others => '0');
signal sel : std_logic_vector(0 downto 0) := (others => '0');

-- define required 1-bit signals
signal we, stb, ack, cyc : std_logic := '0';

-- define additional signals (err,rty,tga,tgc,tgd)

begin
    datm2s <= btn_ctrl_dat_o;
    adr <= btn_ctrl_adr_o;
    sel <= btn_ctrl_sel_o;
    we <= btn_ctrl_we_o;
    btn_ctrl_dat_i <= dats2m;
    btn_ctrl_ack_i <= ack;

    -- interconnect
    interconnect : process (rst_i, adr, btn_ctrl_cyc_o)
    begin
        --if (rising_edge(clk_i)) then
            if (rst_i = '1') then
                --synchronous reset
                stb <= '0';
                cyc <= '0';
            else
                stb <= btn_ctrl_stb_o;
                cyc <= btn_ctrl_cyc_o;

                if (btn_ctrl_cyc_o = '1') then
                    -- address decoder (slave select) = ifs
                    -- interconnection = inside ifs
                    
					-- Baseaddress: 0x0, size: 0x100000
					if (to_integer(unsigned(adr)) <= 1048576) then
						led_ctrl_dat_i <= datm2s;
						dats2m <= led_ctrl_dat_o;
						led_ctrl_sel_i <= sel;
						ack <= led_ctrl_ack_o;
						led_ctrl_adr_i <= adr(7 downto 0);
						led_ctrl_cyc_i <= cyc;
						led_ctrl_stb_i <= stb;
						led_ctrl_we_i <= we;
					else
						-- prevent latches on invalid slave selection
						led_ctrl_dat_i <= (others => '0');
						led_ctrl_sel_i <= (others => '0');
						led_ctrl_adr_i <= (others => '0');
						led_ctrl_cyc_i <= '0';
						led_ctrl_stb_i <= '0';
						led_ctrl_we_i <= '0';
						dats2m <= (others => '0');
						ack <= '0';
					end if;
                else
					-- prevent latches on invalid cycles
					led_ctrl_dat_i <= (others => '0');
					led_ctrl_sel_i <= (others => '0');
					led_ctrl_adr_i <= (others => '0');
					led_ctrl_cyc_i <= '0';
					led_ctrl_stb_i <= '0';
					led_ctrl_we_i <= '0';
					dats2m <= (others => '0');
					ack <= '0';
                end if;
            end if;
        --else
            --null;
        --end if;
    end process interconnect;
end Behavioral;
